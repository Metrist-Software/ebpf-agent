# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "centos/7"
  # Libvirt is preferred given issues around VirtualBox, Oracle licensing, and
  # commercial use we need to sort out first.
  config.vm.provider "libvirt" do |vm|
    vm.memory = "16384"
    vm.cpus = 32
    vm.memorybacking :access, :mode => "shared"
  end
  config.vm.synced_folder "../../", "/vagrant", type: "nfs", nfs_version: 4, nfs_udp: false

  config.vm.provision "shell", inline: <<-SHELL
    # Development environment. Some of these installation steps are very slow, so we test
    # for them already having happened in case we need to fix this script and restart
    # provisioning a bunch of times.

    yum install -y kernel kernel-devel elfutils-libelf-devel git make pkgconfig zstd wget openssl-devel centos-release-scl python3
    yum install -y devtoolset-11-*

    . /opt/rh/devtoolset-11/enable

    # Keep same as above.
    export CMAKE_BUILD_PARALLEL_LEVEL=16

    # For llvm/clang, we need cmake.
    [ -f /usr/local/bin/cmake ] || {
      cd /tmp
      wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1.tar.gz
      tar -xaf cmake-3.24.1.tar.gz
      cd ./cmake-3.24.1
      scl enable devtoolset-11 -- ./configure
      scl enable devtoolset-11 -- gmake install
    }
    PATH=$PATH:/usr/local/bin


    # For BPF, we need clang-13 which is not on Yum so we go from source.
    [ -f /opt/llvm-13/bin/llvm-config ] || {
      cd /tmp
      git clone -b release/13.x --single-branch --depth 1 https://github.com/llvm/llvm-project
      cd llvm-project
      mkdir build
      cd build
      scl enable devtoolset-11 -- cmake ../llvm -DCMAKE_INSTALL_PREFIX=/opt/llvm-13 -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang
      scl enable devtoolset-11 -- cmake --build . --target install
      cp build/bin/FileCheck /opt/llvm-13/bin

      # Cargo-bpf wants to link against libLLVM-13 which does not exist. It gets created if we generate a dynamic
      # library, but then both static and dynamic libraries end up in cargo-bpf and that gives run-time errors around
      # duplicate symbols. This hack creates the library that works.
      cd /opt/llvm-13/lib
      echo 'create libLLVM-13.a' >/tmp/makelib.m
      ls libLLVM*.a | awk '{print "addlib "  $1}' >>/tmp/makelib.m
      echo 'save' >>/tmp/makelib.m
      echo 'end' >>/tmp/makelib.m
      ar -M </tmp/makelib.m
    }
    export LLVM_SYS_130_PREFIX=/opt/llvm-13
    PATH=$LLVM_SYS_130_PREFIX/bin:$PATH


    # Install Rust for the Vagrant user
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs >/tmp/install.sh
    chmod 755 /tmp/install.sh
    sudo -u vagrant /tmp/install.sh -y
    # (-i for login shells from here so we get the env vars for Cargo etc.)
    sudo -iu vagrant rustup default 1.56
    sudo -iu vagrant cargo install cargo-bpf --git https://github.com/redsift/redbpf

    # Default ulimit really is low
    cat >/etc/security/limits.d/10-files.conf <<EOF
* hard nofile 1000000
EOF
    # Login config.
    cat >>/home/vagrant/.bashrc  <<EOF
ulimit -n 100000
cd /vagrant
. /opt/rh/devtoolset-11/enable
export LLVM_SYS_130_PREFIX=/opt/llvm-13
PATH=$LLVM_SYS_130_PREFIX/bin:$PATH
TERM=xterm-color
EOF
  SHELL
end
